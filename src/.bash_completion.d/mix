declare -A _mix_cache

__mix_list_task_names() {
    mix help --names 2>/dev/null |
        sort --unique
}

__mix_list_task_options() {
    mix help $1 2>/dev/null |
        grep -oP -- '(?<=`)--.*?(?=`)' |
        sort --unique
}

__mix_is_inside_mix_project() {
    [ -f './mix.exs' ]
}

__mix_get_current_project_last_modified() {
    if __mix_is_inside_mix_project; then
        ls -l --time-style=+"$1" './mix.exs' | awk '{print $6}'
    fi
}

__mix_parse_current_task_name() {
    local words
    _get_comp_words_by_ref -n : words
    echo "${words[1]}"
}

__mix_handle_completion_task() {
    local cmd_key='cmd'
    local reload_key='last_modified'
    local reload_value="$(__mix_get_current_project_last_modified '%T')"
    if ! __mix_is_inside_mix_project; then
        _mix_cache["$cmd_key"]="$(__mix_list_task_names)"
    else
        if [ -z "${_mix_cache[$cmd_key]}" ] ||
            [ "${_mix_cache[$reload_key]}" != "$reload_value" ]; then
            _mix_cache["$cmd_key"]="$(__mix_list_task_names)"
            _mix_cache["$reload_key"]="$reload_value"
        fi
    fi
    COMPREPLY=($(compgen -W "${_mix_cache[$cmd_key]}" "$cur"))
}

__mix_handle_completion_task_options() {
    local cur_task="$(__mix_parse_current_task_name)"
    if [ -z "${_mix_cache[$cur_task]}" ]; then
        _mix_cache[$cur_task]=$(__mix_list_task_options $cur_task)
    fi
    COMPREPLY=($(compgen -W "${_mix_cache[$cur_task]}" -- "$1"))
}

_mix() {
    local cur
    _get_comp_words_by_ref -n : cur
    if ! [ $(command -v mix) ]; then
        COMPREPLY=($(compgen -o default "$cur"))
        return 0
    fi
    if [ "${cur:0:2}" != '--' ]; then
        __mix_handle_completion_task $cur
    else
        __mix_handle_completion_task_options $cur
    fi
}

comp_test() {
    _get_comp_words_by_ref -n : cur prev words cword
    echo ''
    echo "cur: $cur"
    echo "prev: $prev"
    echo "words: ${words[@]}"
    echo "cword: $cword"
}

complete -F _mix mix
# complete -F comp_test mix
